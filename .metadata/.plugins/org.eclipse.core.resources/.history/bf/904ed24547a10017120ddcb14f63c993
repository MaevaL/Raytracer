package utils;

import java.util.Vector;

import models.Ray;
import models.Sphere;
import models.Vec3;

public class TracingUtils {
	
	public Double intersec(Ray ray, Sphere sphere) {
		double t;
		double b = 2 * (ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		double c = (ray.getOrigine().substract(sphere.getOrigin()).squareNorme()) - (sphere.getRaySphere()*sphere.getRaySphere());
		double delta = (b*b) - (4 * c);
		if (delta > 0) {
			double x1 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) + (Math.sqrt(delta) / 2);
			double x2 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) - (Math.sqrt(delta) / 2);

			if (x1 < 0 && x2 < 0) {
				return null;
			}
			else if (x2 < 0 && x1 > 0) {
				return x1;
			}
			else
			{
				return x2;
			}
		}
		else if (delta == 0) {
			return -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		}
		else {
			return null;
		}
	}
	
	public Vector<Vec3> raytracer(int height, int width, double fov, Sphere sphere, Vector<Vec3> pixels){
		Vec3 origin = new Vec3(0,0,0);
		Vec3 direction = new Vec3(0,0,0);
		double inter = 0;
		Vec3 pixel = new Vec3(0,0,0);
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				direction.setX(j - (width / 2));
				direction.setY(i - (height / 2));
				direction.setZ(-(width / (2 * Math.tan(fov / 2))));
				Ray r = new Ray(origin, direction);
				inter = intersec(r, sphere); 
				if(inter < 0){
					pixel.setCoordinate(0, 0, 0);
					pixels.set((i*width) + j, pixel);
				}
				else {
					pixel.setCoordinate(sphere.getColor().getX(), sphere.getColor().getY(), sphere.getColor().getZ());
					pixels.set((i*width) + j, pixel);
				}
			}
		}
		return pixels;
	}
	

}
