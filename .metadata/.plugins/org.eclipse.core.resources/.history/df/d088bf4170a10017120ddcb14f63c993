package utils;

import java.util.ArrayList;
import java.util.List;

import models.Intersection;
import models.Ray;
import models.Scene;
import models.Sphere;
import models.Vec3;

public class TracingUtils {

	public static Double intersec(Ray ray, Sphere sphere) {
		double b = 2.0 * (ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		double c = (ray.getOrigine().substract(sphere.getOrigin()).squareNorme()) - (sphere.getRaySphere()*sphere.getRaySphere());
		double delta = (b*b) - (4.0 * c);
		if (delta > 0) {
			double x1 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) + (Math.sqrt(delta) / 2.0);
			double x2 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) - (Math.sqrt(delta) / 2.0);

			if (x1 < 0 && x2 < 0) {
				return null;
			}
			else if (x2 < 0 && x1 > 0) {
				return x1;
			}
			else
			{
				return x2;
			}
		}
		else if (delta == 0) {
			return -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		}
		else {
			return null;
		}
	}

	public static List<Vec3> raytracer(int height, int width, double fov, Sphere sphere){
		List<Vec3> pixels = new ArrayList<Vec3>(height * width);
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				pixels.add(null);
			}
		}
		Vec3 origin = new Vec3(0,0,0);
		Vec3 direction = new Vec3(0,0,0);
		Double inter = 0.0;
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				direction.setX((double)j - ((double)width / 2.0));
				direction.setY((double)i - ((double)height / 2.0));
				direction.setZ(-((double)width / (2.0 * Math.tan(fov / 2.0))));
				Ray r = new Ray(origin, direction);
				inter = intersec(r, sphere); 
				if(inter == null){
					Vec3 pixel = new Vec3(0,0,0);
					pixels.set((i*width) + j, pixel);
				}
				else {
					Vec3 pixel = new Vec3(sphere.getColor().getX(),sphere.getColor().getY(),sphere.getColor().getZ());
					pixels.set((i*width) + j, pixel);
				}
			}
		}
		return pixels;
	}
	
	public static List<Vec3> raytracer(int height, int width, double fov, Scene scene){
		List<Vec3> pixels = new ArrayList<Vec3>(height * width);
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				pixels.add(null);
			}
		}
		Vec3 origin = new Vec3(0,0,0);
		Vec3 direction = new Vec3(0,0,0);
		Double inter = 0.0;
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				direction.setX((double)j - ((double)width / 2.0));
				direction.setY((double)i - ((double)height / 2.0));
				direction.setZ(-((double)width / (2.0 * Math.tan(fov / 2.0))));
				Ray r = new Ray(origin, direction);
				inter = castRay(r, scene.getSpheres().get(0)); 
				if(inter == null){
					Vec3 pixel = new Vec3(0,0,0);
					pixels.set((i*width) + j, pixel);
				}
				else {
					Vec3 pixel = new Vec3(sphere.getColor().getX(),sphere.getColor().getY(),sphere.getColor().getZ());
					pixels.set((i*width) + j, pixel);
				}
			}
		}
		return pixels;
	}

	private static Double castRay(Ray r, Sphere sphere) {
		Double inter;
		
		inter = intersec(r, sphere);
		return inter;
	}
	
	
	
	public static Intersection intersecScene(Scene scene, Ray r){
		Double inter = 0.0;
		Double distanceMin = null;
		
		for (Sphere sphere : scene.getSpheres()) {
			inter = TracingUtils.intersec(r, sphere);
			if(inter != null) {
				if(distanceMin == null) {
					distanceMin = inter;
				}else if(inter < distanceMin) {
					distanceMin = inter;
				}
			}
		}
		if(distanceMin != null) {
			return new Intersection(r.position3D(distanceMin), distanceMin);
		}
		return null;
	}
}
