package utils;

import java.util.Vector;

import models.Ray;
import models.Sphere;
import models.Vec3;

public class TracingUtils {
	
	public static Double intersec(Ray ray, Sphere sphere) {
		double b = 2.0 * (ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		double c = (ray.getOrigine().substract(sphere.getOrigin()).squareNorme()) - (sphere.getRaySphere()*sphere.getRaySphere());
		double delta = (b*b) - (4.0 * c);
		if (delta > 0) {
			double x1 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) + (Math.sqrt(delta) / 2.0);
			double x2 = -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin()))) - (Math.sqrt(delta) / 2.0);

			if (x1 < 0 && x2 < 0) {
				return null;
			}
			else if (x2 < 0 && x1 > 0) {
				return x1;
			}
			else
			{
				return x2;
			}
		}
		else if (delta == 0) {
			return -(ray.getDirection().scalarProduct(ray.getOrigine().substract(sphere.getOrigin())));
		}
		else {
			return null;
		}
	}
	
	public static Vector<Vec3> raytracer(int height, int width, double fov, Sphere sphere, Vector<Vec3> pixels){
		Vec3 origin = new Vec3(0,0,0);
		Vec3 direction = new Vec3(0,0,0);
		Double inter = 0.0;
		Vec3 pixel = new Vec3(0,0,0);
		for (int i = 0; i < height; i++){
			for (int j = 0; j < width; j++) {
				direction.setX((double)j - ((double)width / 2.0));
				direction.setY((double)i - ((double)height / 2.0));
				direction.setZ(-((double)width / (2.0 * Math.tan(fov / 2.0))));
				Ray r = new Ray(origin, direction);
				inter = intersec(r, sphere); 
				if(inter == null){
					pixel.setCoordinate(0, 0, 0);
					pixels.add((i*width) + j, pixel);
				}
				else {
					pixel.setCoordinate(sphere.getColor().getX(), sphere.getColor().getY(), sphere.getColor().getZ());
					pixels.add((i*width) + j, pixel);
				}
			}
		}
		for(int k = 0; k < pixels.size(); k++) {
			pixels.get(k).showVec();
		}
		return pixels;
	}
}
